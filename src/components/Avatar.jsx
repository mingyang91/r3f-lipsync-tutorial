/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/646d9dcdc8a5f5bddbfac913.glb -o src/components/Avatar.jsx -r public
*/

import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useFrame, useLoader } from "@react-three/fiber";
import { useControls } from "leva";
import React, { useEffect, useMemo, useRef, useState } from "react";

import * as THREE from "three";
import { createAudioPlaySubject } from "../utils/player";
import { listenerStream } from "../utils/listener-stream"

const mapping = {
  "@": "viseme_sil",    // This usually represents a schwa or neutral vowel. Mapping to silence as a neutral position.
  "sil": "viseme_sil",
  "p": "viseme_PP",
  "b": "viseme_PP",
  "m": "viseme_PP",
  "f": "viseme_FF",
  "v": "viseme_FF",
  "T": "viseme_TH",     // Represents "th" in ARPAbet
  "dh": "viseme_TH",
  "t": "viseme_DD",
  "d": "viseme_DD",
  "k": "viseme_kk",
  "g": "viseme_kk",
  "ng": "viseme_kk",
  "ch": "viseme_CH",
  "j": "viseme_CH",
  "s": "viseme_SS",
  "z": "viseme_SS",
  "sh": "viseme_SS",
  "zh": "viseme_SS",
  "n": "viseme_nn",
  "r": "viseme_RR",
  "er": "viseme_RR",
  "a": "viseme_aa",
  "aa": "viseme_aa",
  "ax": "viseme_aa",
  "ah": "viseme_aa",
  "ae": "viseme_E",
  "ey": "viseme_E",
  "eh": "viseme_E",
  "ih": "viseme_I",
  "ix": "viseme_I",
  "aw": "viseme_O",
  "ow": "viseme_O",
  "ao": "viseme_O",
  "oy": "viseme_O",
  "uw": "viseme_U",
  "uh": "viseme_U",
  "w": "viseme_U",
  "y": "viseme_U",
  "o": "viseme_O",     // Based on the sound of the phoneme
  "e": "viseme_E",     // Based on the sound of the phoneme
  "S": "viseme_SS",    // Represents "sh" in ARPAbet
  "u": "viseme_U",     // Based on the sound of the phoneme
  "E": "viseme_E",     // Based on the sound of the phoneme
  "i": "viseme_I"      // Based on the sound of the phoneme
}


export function Avatar(props) {
  const {
    startRecording,
    startListening,
    playAudio,
    script,
    headFollow,
    smoothMorphTarget,
    morphTargetSmoothing,
  } = useControls({
    startRecording: false,
    startListening: false,
    playAudio: false,
    headFollow: true,
    smoothMorphTarget: true,
    morphTargetSmoothing: 0.5,
    script: {
      value: "welcome",
      options: ["welcome", "pizzas", "example"],
    },
  });

  const audio = useMemo(() => new Audio(`/audios/${script}.mp3`), [script]);
  const [visemes, setVisemes] = useState([]);
  const [startTime, setStartTime] = useState(Date.now());
  useEffect(() => {
    if (startListening) {
      const player$ = createAudioPlaySubject()
      const ws$ = listenerStream()
      ws$.subscribe({
        next(msg) { 
          if (msg.data instanceof Blob) {
            player$.next(msg.data)
          } else {
              const evt = JSON.parse(msg.data)
              if (evt.type === 'Translation') {
                  console.log("translation:", evt.content)
              } else if (evt.type === 'original') {
                  console.log("transcription:", evt.content)
              } else {
                setVisemes(evt.visemes)
                setStartTime(Date.now())
              }
          }
        }
      })
      return () => {
        ws$.unsubscribe()
        player$.unsubscribe()
      }
    }
  }, [startListening]);

  const jsonFile = useLoader(THREE.FileLoader, `audios/${script}.json`);
  const lipsync = JSON.parse(jsonFile);

  useFrame(() => {
    const currentAudioTime = Date.now() - startTime;
    const lipsync = { visemes }

    Object.values(mapping).forEach((value) => {
      if (!smoothMorphTarget) {
        nodes.Wolf3D_Head.morphTargetInfluences[
          nodes.Wolf3D_Head.morphTargetDictionary[value]
        ] = 0;
        nodes.Wolf3D_Teeth.morphTargetInfluences[
          nodes.Wolf3D_Teeth.morphTargetDictionary[value]
        ] = 0;
      } else {
        nodes.Wolf3D_Head.morphTargetInfluences[
          nodes.Wolf3D_Head.morphTargetDictionary[value]
        ] = THREE.MathUtils.lerp(
          nodes.Wolf3D_Head.morphTargetInfluences[
            nodes.Wolf3D_Head.morphTargetDictionary[value]
          ],
          0,
          morphTargetSmoothing
        );

        nodes.Wolf3D_Teeth.morphTargetInfluences[
          nodes.Wolf3D_Teeth.morphTargetDictionary[value]
        ] = THREE.MathUtils.lerp(
          nodes.Wolf3D_Teeth.morphTargetInfluences[
            nodes.Wolf3D_Teeth.morphTargetDictionary[value]
          ],
          0,
          morphTargetSmoothing
        );
      }
    });

    for (let i = 0; i < lipsync.visemes.length; i++) {
      const mouthCue = lipsync.visemes[i];
      if (
        currentAudioTime >= mouthCue.time &&
        currentAudioTime <= mouthCue.time + 100
      ) {
        if (!smoothMorphTarget) {
          nodes.Wolf3D_Head.morphTargetInfluences[
            nodes.Wolf3D_Head.morphTargetDictionary[
              mapping[mouthCue.value]
            ]
          ] = 1;
          nodes.Wolf3D_Teeth.morphTargetInfluences[
            nodes.Wolf3D_Teeth.morphTargetDictionary[
              mapping[mouthCue.value]
            ]
          ] = 1;
        } else {
          nodes.Wolf3D_Head.morphTargetInfluences[
            nodes.Wolf3D_Head.morphTargetDictionary[
              mapping[mouthCue.value]
            ]
          ] = THREE.MathUtils.lerp(
            nodes.Wolf3D_Head.morphTargetInfluences[
              nodes.Wolf3D_Head.morphTargetDictionary[
                mapping[mouthCue.value]
              ]
            ],
            1,
            morphTargetSmoothing
          );
          nodes.Wolf3D_Teeth.morphTargetInfluences[
            nodes.Wolf3D_Teeth.morphTargetDictionary[
              mapping[mouthCue.value]
            ]
          ] = THREE.MathUtils.lerp(
            nodes.Wolf3D_Teeth.morphTargetInfluences[
              nodes.Wolf3D_Teeth.morphTargetDictionary[
                mapping[mouthCue.value]
              ]
            ],
            1,
            morphTargetSmoothing
          );
        }

        break;
      }
    }
  });

  useEffect(() => {
    nodes.Wolf3D_Head.morphTargetInfluences[
      nodes.Wolf3D_Head.morphTargetDictionary["viseme_I"]
    ] = 1;
    nodes.Wolf3D_Teeth.morphTargetInfluences[
      nodes.Wolf3D_Teeth.morphTargetDictionary["viseme_I"]
    ] = 1;
    if (playAudio) {
      audio.play();
      if (script === "welcome") {
        setAnimation("Greeting");
      } else {
        setAnimation("Angry");
      }
    } else {
      setAnimation("Idle");
      audio.pause();
    }
  }, [playAudio, script]);

  const { nodes, materials } = useGLTF("/models/646d9dcdc8a5f5bddbfac913.glb");
  const { animations: idleAnimation } = useFBX("/animations/Idle.fbx");
  const { animations: angryAnimation } = useFBX(
    "/animations/Angry Gesture.fbx"
  );
  const { animations: greetingAnimation } = useFBX(
    "/animations/Standing Greeting.fbx"
  );

  idleAnimation[0].name = "Idle";
  angryAnimation[0].name = "Angry";
  greetingAnimation[0].name = "Greeting";

  const [animation, setAnimation] = useState("Idle");

  const group = useRef();
  const { actions } = useAnimations(
    [idleAnimation[0], angryAnimation[0], greetingAnimation[0]],
    group
  );

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  // CODE ADDED AFTER THE TUTORIAL (but learnt in the portfolio tutorial ♥️)
  useFrame((state) => {
    if (headFollow) {
      group.current.getObjectByName("Head").lookAt(state.camera.position);
    }
  });

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/646d9dcdc8a5f5bddbfac913.glb");

function onSpeechData(data) {
  if (removeLastSentence) {
    resultText.lastElementChild.remove();
  }
  removeLastSentence = true;

  //add empty span
  // let empty = document.createElement('span');
  // resultText.appendChild(empty);

  // //add children to empty span
  // let edit = addTimeSettingsInterim(data);

  // for (var i = 0; i < edit.length; i++) {
  //   resultText.lastElementChild.appendChild(edit[i]);
  //   resultText.lastElementChild.appendChild(
  //       document.createTextNode('\u00A0')
  //   );
  // }
}